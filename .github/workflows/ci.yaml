# This will build on merge to develop or a semver tag.
name: ci

env:
  DOCKER_REPO: mobilecoin/mobot
  CHART_RELEASE_NAME: mobot
  CHART_PATH: ./chart

# Expected secrets.
# RANCHER_TOKEN
# DOCKERHUB_USERNAME
# DOCKERHUB_TOKEN

# Expected not-secret-secrets.
# RANCHER_URL
# STAGING_CLUSTER
# STAGING_NAMESPACE
# STAGING_VALUES
# PRODUCTION_CLUSTER
# PRODUCTION_NAMESPACE
# PRODUCTION_VALUES

on:
  push:
    tags:
    - 'v*'
    branches:
    - dev

jobs:
  docker:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Generate Docker Tags
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.DOCKER_REPO }}
        tags: |
          type=ref,event=pr,priority=30
          type=semver,pattern=v{{version}},priority=20
          type=sha,priority=10
      # Priority matters because the chart deploy should use a specific tag over "latest".

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Tests
      id: run_tests
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_REPO }}@${{ steps.docker_build.outputs.digest }}
      run: |
        docker-compose -f ./docker/docker-compose.test.yaml \
          up --exit-code-from test

    - name: Publish to DockerHub
      id: docker_publish_dockerhub
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    if: github.ref == 'refs/heads/dev'
    needs: docker
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      options: --entrypoint /bin/sh
    env:
      RANCHER_URL: ${{ secrets.RANCHER_URL }}
      RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
      RANCHER_CLUSTER: ${{ secrets.STAGING_CLUSTER }}
      RANCHER_CLUSTER_NAMESPACE: ${{ secrets.STAGING_NAMESPACE }}
      VALUES: ${{ secrets.STAGING_VALUES }}
      TAGS: ${{ needs.docker.outputs.tags }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Deploy
      run: |
        apk add --no-cache bash curl jq
        .github/workflows/helpers/rancher_deploy.sh

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/')
    needs: docker
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      options: --entrypoint /bin/sh
    env:
      RANCHER_URL: ${{ secrets.RANCHER_URL }}
      RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
      RANCHER_CLUSTER: ${{ secrets.PRODUCTION_CLUSTER }}
      RANCHER_CLUSTER_NAMESPACE: ${{ secrets.PRODUCTION_NAMESPACE }}
      VALUES: ${{ secrets.PRODUCTION_VALUES }}
      TAGS: ${{ needs.docker.outputs.tags }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Deploy
      run: |
        apk add --no-cache bash curl jq
        .github/workflows/helpers/rancher_deploy.sh

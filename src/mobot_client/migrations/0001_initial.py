# Generated by Django 3.0.4 on 2021-08-29 15:27

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mobot_client.models.phone_numbers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BonusCoin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_pmob', models.PositiveIntegerField(default=0)),
                ('number_available_at_start', models.PositiveIntegerField(default=0)),
            ],
            options={
                'base_manager_name': 'available',
            },
            managers=[
                ('available', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', mobot_client.models.phone_numbers.PhoneNumberField(db_index=True, max_length=128)),
                ('received_sticker_pack', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Drop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drop_type', models.IntegerField(choices=[(0, 'airdrop'), (1, 'item')], db_index=True, default=0)),
                ('pre_drop_description', models.TextField()),
                ('advertisment_start_time', models.DateTimeField(db_index=True)),
                ('start_time', models.DateTimeField(db_index=True)),
                ('end_time', models.DateTimeField(db_index=True)),
                ('number_restriction', models.TextField(default='+44')),
                ('timezone', models.TextField(default='UTC')),
                ('initial_coin_amount_pmob', models.PositiveIntegerField(default=0)),
                ('initial_coin_limit', models.PositiveIntegerField(default=0)),
                ('conversion_rate_mob_to_currency', models.FloatField(default=1.0)),
                ('currency_symbol', models.TextField(default='$')),
                ('country_code_restriction', models.TextField(default='GB')),
                ('country_long_name_restriction', models.TextField(default='United Kingdom')),
                ('max_refund_transaction_fees_covered', models.PositiveIntegerField(default=0)),
                ('name', models.TextField(db_index=True, default='A drop')),
            ],
            options={
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='DropSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.IntegerField(choices=[(-4, 'Idle And Refundable'), (-3, 'Idle'), (-2, 'Refunded'), (-1, 'Cancelled'), (0, 'Ready'), (1, 'Waiting For Payment Or Bonus TX'), (2, 'Waiting For Size'), (3, 'Waiting For Name'), (4, 'Waiting For Address'), (5, 'Shipping Info Confirmation'), (6, 'Allow Contact Requested'), (7, 'Completed'), (8, 'Customer Does Not Meet Restrictions'), (9, 'Out of Stock or MOB')], default=0)),
                ('manual_override', models.BooleanField(default=False)),
                ('bonus_coin_claimed', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='drop_sessions', to='mobot_client.BonusCoin')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drop_sessions', to='mobot_client.Customer')),
                ('drop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drop_sessions', to='mobot_client.Drop')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('price_in_pmob', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('short_description', models.TextField(blank=True, default=None, null=True)),
                ('image_link', models.URLField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('phone_number', mobot_client.models.phone_numbers.PhoneNumberField(db_index=True, max_length=128)),
                ('description', models.TextField()),
                ('privacy_policy_url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Sku',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField()),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skus', to='mobot_client.Item')),
            ],
            options={
                'base_manager_name': 'available',
                'unique_together': {('item', 'identifier')},
            },
            managers=[
                ('available', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.IntegerField(blank=True, choices=[(-2, 'refund'), (-1, 'bonus'), (1, 'payment')], db_index=True, null=True)),
                ('amount_in_mob', models.DecimalField(db_index=True, decimal_places=6, default=Decimal('0'), max_digits=6, max_length=16)),
                ('direction', models.IntegerField(choices=[(-1, 'to_customer'), (1, 'to_store')], default=1)),
                ('status', models.IntegerField(choices=[(-3, 'not_started'), (-2, 'failure'), (-1, 'no address found for customer'), (0, 'in progress'), (1, 'succeeded'), (2, 'empty because amount in mob was too small to send')], default=-3)),
                ('payment_address', models.TextField(blank=True, null=True)),
                ('drop_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='mobot_client.DropSession')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('shipping_address', models.TextField(blank=True, default=None, null=True)),
                ('shipping_name', models.TextField(blank=True, default=None, null=True)),
                ('status', models.IntegerField(choices=[(0, 'started'), (1, 'confirmed'), (2, 'shipped'), (3, 'cancelled')], db_index=True, default=0)),
                ('conversion_rate_mob_to_currency', models.FloatField(default=0.0)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='mobot_client.Customer')),
                ('drop_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='order', to='mobot_client.DropSession')),
                ('sku', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='mobot_client.Sku')),
            ],
            options={
                'base_manager_name': 'active_orders',
            },
            managers=[
                ('active_orders', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('direction', models.PositiveIntegerField(choices=[(0, 'received'), (1, 'sent')])),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='mobot_client.Customer')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mobot_client.Store')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='mobot_client.Store'),
        ),
        migrations.AddField(
            model_name='drop',
            name='item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='drops', to='mobot_client.Item'),
        ),
        migrations.AddField(
            model_name='drop',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drops', to='mobot_client.Store'),
        ),
        migrations.CreateModel(
            name='CustomerStorePreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allows_contact', models.BooleanField()),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_store_preferences', to='mobot_client.Customer')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_store_preferences', to='mobot_client.Store')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerDropRefunds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_times_refunded', models.PositiveIntegerField(default=0)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drop_refunds', to='mobot_client.Customer')),
                ('drop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drop_refunds', to='mobot_client.Drop')),
            ],
        ),
        migrations.CreateModel(
            name='ChatbotSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('avatar_filename', models.TextField()),
                ('store', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='mobot_client.Store')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='bonuscoin',
            name='drop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonus_coins', to='mobot_client.Drop'),
        ),
    ]

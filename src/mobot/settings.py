# Copyright (c) 2021 MobileCoin. All rights reserved.

"""
Django settings for mobot project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "123")
GMAPS_CLIENT_KEY = os.environ.get('GMAPS_CLIENT_KEY')
VAT_ID = os.environ.get('VAT_ID', "123")
SIGNALD_ADDRESS = os.getenv("SIGNALD_ADDRESS", "127.0.0.1")
SIGNALD_PORT = int(os.getenv("SIGNALD_PORT", "15432"))
SIGNALD_PROCESS_TIMEOUT = os.getenv("SIGNALD_PROCESS_TIMEOUT", 20)
FULLSERVICE_ADDRESS = os.getenv("FULLSERVICE_ADDRESS", "127.0.0.1")
FULLSERVICE_PORT = os.getenv("FULLSERVICE_PORT", "9090")
FULLSERVICE_URL = f"http://{FULLSERVICE_ADDRESS}:{FULLSERVICE_PORT}/wallet"
CONCURRENCY_WARNING_MESSAGE_THRESHOLD = os.getenv("CONCURRENCY_WARNING_MESSAGE_THRESHOLD", 10)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False)

DATABASE = os.environ.get('DATABASE', 'postgresql')


ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'mobot_client.apps.MobotClientConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mobot.urls'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {name} --- {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} --- {message}",
            "style": "{",
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get("DJANGO_LOG_LEVEL", "INFO"),
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mobot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
PGBOUNCER_PORT = os.getenv("PGBOUNCER_PORT", 6432)

if DATABASE == "postgresql":
    try:
        DATABASE_NAME = os.environ.get("DATABASE_NAME", "mobot")
        DATABASE_USER = os.environ.get("DATABASE_USER", "mobot")
        DATABASE_PASSWORD = os.environ.get("DATABASE_PASSWORD", "mobot")
        DATABASE_HOST = os.environ.get("DATABASE_HOST", "localhost")
    except KeyError:
        print("expecting environment variables for database fields")

    DATABASE_PORT = os.environ.get("DATABASE_PORT", "5432")
    DATABASE_SSL_MODE = os.environ.get("DATABASE_SSL_MODE", "prefer")
    DATABASE_SSL_ROOT_CERT = os.environ.get("DATABASE_SSL_ROOT_CERT", "")

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': DATABASE_NAME,
            'USER': DATABASE_USER,
            'PASSWORD': DATABASE_PASSWORD,
            'PORT': DATABASE_PORT,
            'DISABLE_SERVER_SIDE_CURSORS': True,
            'OPTIONS': {
                'sslmode': DATABASE_SSL_MODE,
                'sslrootcert': DATABASE_SSL_ROOT_CERT,
            },
            'TEST': {
                'NAME': f"{DATABASE_NAME}_test"
            },
        }
    }
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'cache_table',
        }
    }

else:
    # https://docs.microsoft.com/en-us/azure/app-service/configure-custom-container?pivots=container-linux#use-persistent-shared-storage
    DB_ROOT = BASE_DIR if DEBUG else '/home'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(DB_ROOT, 'db.sqlite3'),
            'OPTIONS': {
                'timeout': 20,
            },
        }
    }
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
